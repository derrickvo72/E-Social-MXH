  <Formik
                initialValues={inform}
                validationSchema={changeInfomation}
                onSubmit={handleSubmitSave}
              >
                {({ errors, touched, ...props }) => (
                  <Form class="w-full">
                    <div class="md:flex md:items-center mb-6">
                      <div class="md:w-1/5">
                        <label class="block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4">
                          Full Name
                        </label>
                      </div>
                      <div class="md:w-2/3">
                        <input
                          class="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500"
                          type="text"
                          value={inform.fullname}
                          onChange={(e) => handleInput(e)}
                          name="fullname"
                          error={errors.fullname}
                          helperText={
                            <ErrorMessage name="fullname">
                              {(msg) => (
                                <span style={{ color: "red" }}>{msg}</span>
                              )}
                            </ErrorMessage>
                          }
                        />
                      </div>
                    </div>
                    
                    <div class="md:flex md:items-center mb-6">
                      <div class="md:w-1/5">
                        <label class="block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4">
                          Facebook
                        </label>
                      </div>
                      <div class="md:w-2/3">
                        <input
                          class="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500"
                          type="text"
                          value={inform.facebook}
                          name="facebook"
                          error={errors.facebook}
                          helperText={
                            <ErrorMessage name="facebook">
                              {(msg) => (
                                <span style={{ color: "red" }}>{msg}</span>
                              )}
                            </ErrorMessage>
                          }
                        />
                      </div>
                    </div>
                    <div class="md:flex md:items-center mb-6">
                      <div class="md:w-1/5">
                        <label class="block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4">
                          Phone number
                        </label>
                      </div>
                      <div class="md:w-2/3">
                        <input
                          class="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500"
                          type="text"
                          value={inform.phone}
                          name="phone"
                        />
                      </div>
                    </div>
                    <div class="md:flex md:items-center mb-6">
                      <div class="md:w-1/5">
                        <label class="block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4">
                          Story
                        </label>
                      </div>
                      <div class="md:w-2/3">
                        <input
                          class="bg-gray-200 appearance-none w-full border-2  border-gray-200 rounded  py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500"
                          type="text"
                          value={inform.story}
                          name="story"
                        />
                      </div>
                    </div>
                    <div class="md:flex md:items-center mb-6">
                      <div class="md:w-1/5">
                        <label class="block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4">
                          Date of birth
                        </label>
                      </div>
                      <div class="md:w-2/3">
                        <LocalizationProvider dateAdapter={AdapterDateFns}>
                          <DatePicker
                            name="dob"
                            variant="filled"
                            openTo="year"
                            label="Date of birth"
                            value={dob}
                            views={["year", "month", "day"]}
                            onChange={(e) => onChangeDob(e)}
                            renderInput={(params) => <TextField {...params} />}
                          />
                        </LocalizationProvider>
                        {errDob && (
                          <div className=" ml-4 text-red-500 text-xs">
                            Người dùng phải từ 13 tuổi trở lên !
                          </div>
                        )}
                      </div>
                    </div>
                    <div class="md:flex md:items-center mb-6">
                      <div class="md:w-1/5">
                        <label
                          class="block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4"
                          for="inline-password"
                        >
                          Gender
                        </label>
                      </div>
                      <div class="md:w-2/3">
                        <FormControl component="fieldset">
                          <RadioGroup
                            row
                            aria-label="gender"
                            value={inform.gender}
                            name="gender"
                          >
                            <FormControlLabel
                              value="female"
                              control={<Radio />}
                              label="Female"
                            />
                            <FormControlLabel
                              value="male"
                              control={<Radio />}
                              label="Male"
                            />
                            <FormControlLabel
                              value="other"
                              control={<Radio />}
                              label="Other"
                            />
                          </RadioGroup>
                        </FormControl>
                      </div>
                    </div>
                    <div className="flex justify-end items-center space-x-2 mt-2">
                      <Button
                        variant="contained"
                        color="success"
                        type="submit"
                        disabled={props.isSubmitting}
                      >
                        {props.isSubmitting ? "Saving..." : "Save"}
                      </Button>
                    </div>
                  </Form>
                )}
              </Formik>



              export const refresh = (obj) =>
  new Promise((resolve, reject) => {
    axiosClient
      .post("/auth/refresh-tokens", {
        refreshToken: obj,
      })
      .then((res) => {
        resolve(res.data);
      })
      .catch(async (err) => await Logout());
  });

export const confirmMail = (obj) =>
  new Promise((resolve, reject) => {
    axiosClient
      .post("/auth/verify-email", null, {
        params: { token: obj },
      })
      .then((res) => {
        resolve(res.data);
      })
      .catch(async (err) => {
        if (err.response.status === 401) await refresh();
        reject(err);
      });
  });




  // useEffect(() => {
  //   const token = query.get("token");
  //   if (token) {
  //     setMessage({ status: "loading", msg: "loading" });
  //     verifyEmail(token);
  //   }
  // }, [query]);

  //#region Ham chung
  // const verifyEmail = async (token) => {
  //   try {
  //     await axios.post(
  //       " https://mxhld.herokuapp.com/v1/auth/verify-email",
  //       null,
  //       {
  //         params: { token: token },
  //       }
  //     );
  //     setMessage({ status: "success", msg: "xac nhan mail thanh cong" });
  //   } catch (err) {
  //     console.log(err)
  //     setMessage({ status: "error", msg: "xac nhan mail that bai" });
  //   }
  // };
  //#endregion

  // const verifyEmail = async (token) => {
  //   try {
  //     console.log(message);
  //     await confirmMail(token);
  //     setCookie("isVerify", "true");
  //     setMessage({ status: "success", msg: "xac nhan mail thanh cong" });
  //   } catch (err) {
  //     console.log("err");
  //     setMessage({ status: "error", msg: "xac nhan mail that bai" });
  //   }
  // };


  //// signin
    // const handleSubmit = async (data, props) => {
  //   try {
  //     console.log(data);
  //     const resData = await login(data);
  //     setCookie("tokens", resData.data.tokens);
  //     setCookie("userId", resData.data.user.id);
  //     setCookie("isVerify", resData.data.user.isEmailVerified);
  //     // console.log("Status ", resData.status);
  //     props.setSubmitting(false);
  //     props.resetForm();
  //     history.push(ROUTES.HOME);
  //     if (isSave) return setCookie("rm_psw", data);
  //     removeCookie("rm_psw");
  //   } catch (err) {
  //     console.log(err);
  //     const error = err.response.data.message;
  //     setShowLogin({
  //       ...loginCheck,
  //       isShow: true,
  //       errMsg:
  //         err.response.data.message + " (code: " + err.response.status + ")",
  //     });
  //   }
  // };


  axios cu

  // export const actLogin = (user, history) => {
//   return (dispatch) => {
//     dispatch(actLoginRequest());
//     axios({
//       url: `https://mxhld.herokuapp.com/v1/auth/login`,
//       method: "POST",
//       data: user,
//     })
//       .then((result) => {
//         // console.log("user", result.data.user);
//         // console.log("tokens", result.data.tokens);
//         dispatch(actLoginSuccess(result.data));
//         history.replace("/");
//       })
//       .catch((error) => {
//         dispatch(actLoginFailed(error.response.data));
//         // console.log("Error day ne", error.response);
//         console.log("Message day ne", error.response.data.message);
//         // console.log("Code day ne", error.response.data.code);
//       });
//   };
// };

// export const actLogin = (user, history) => {
//   return (dispatch) => {
//     dispatch(actLoginRequest());
//     axiosInstance({
//       url: `/auth/login`,
//       method: "POST",
//       data: user,
//     })
//       .then((result) => {
//         dispatch(actLoginSuccess(result.data));
//         // dispatch(actLoginSuccess({
//         //   fullName:result.data.user.fullName,
//         //   email:result.data.user.email,
//         // }));
//         history.replace("/");
//       })
//       .catch((error) => {
//         dispatch(actLoginFailed(error.response.data));
//       });
//   };
// };




const handleSubmitChange = (data, props) => {
    // axios({
    // url: `https://mxhld.herokuapp.com/v1/profile/change-profile/`,
    // method: "PUT",
    // }).then(result => {
    //   dispatch(actUpdateUser(currentUser._id))
    // }).catch((error) => {
    //   console.log("error",error.response)
    // })

    const birthday = moment(dob).format("MM/DD/YYYY");
    if (errDob) {
      setErrDob(true);
      return;
    }
    data.birthday = birthday;
    setUserInfo({
      ...data,
    });
    console.log("Data day ne");
    console.log(currentUser);
    // dispatch(
    //   actLoginSuccess({
    //     user: { ...currentUser.user, ...data },
    //     tokens: { ...currentUser.tokens },
    //   })
    // );
    // setTimeout(() => {
    //   props.setSubmitting(false);
    // }, 2000);
    onClose();
  };